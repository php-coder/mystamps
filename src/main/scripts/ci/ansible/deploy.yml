---

- hosts: all
  gather_facts: no
  remote_user: mystamps
  vars:
    remote_war_dir: /data/mystamps
    uptimerobot:
      monitorid: 'MyStamps'
      apikey: "{{ lookup('env', 'UPTIMEROBOT_APIKEY') }}"
  tasks:

  - name: Getting info about WAR file
    stat:
      path: 'target/mystamps.war'
      get_checksum: no
      get_md5: no
    register: war_file
    become: no
    delegate_to: 127.0.0.1

  - name: Ensuring that WAR file exists
    assert:
      that:
        war_file.stat.exists
    become: no
    delegate_to: 127.0.0.1

  - name: Stopping monitoring
    uptimerobot:
      monitorid: "{{ uptimerobot.monitorid }}"
      apikey: "{{ uptimerobot.apikey }}"
      state: paused
    when: uptimerobot is defined and uptimerobot.monitorid and uptimerobot.apikey

  # we can't use service module here because our sudoers allows to execute only exact commands
  - name: Stopping service # noqa 301 ignoring this because we're always stopping service before deploy
    raw:
      sudo systemctl stop mystamps

  - name: Copying WAR file
    copy:
      src: '../../../../../target/mystamps.war'
      dest: "{{ remote_war_dir }}/mystamps.war"
      owner: mystamps
      group: mystamps
      mode: '0755'
      backup: yes

  # we can't use service module here because our sudoers allows to execute only exact commands
  - name: Starting service # noqa 301 ignoring this because we're always starting service after deploy
    raw:
      sudo systemctl start mystamps

  - name: Starting monitoring
    uptimerobot:
      monitorid: "{{ uptimerobot.monitorid }}"
      apikey: "{{ uptimerobot.apikey }}"
      state: started
    when: uptimerobot is defined and uptimerobot.monitorid and uptimerobot.apikey

